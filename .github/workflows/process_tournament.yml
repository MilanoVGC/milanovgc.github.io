# .github/workflows/process_tournament.yml

name: Process Tournament TDF Upload

on:
  push:
    branches:
      - main
    paths:
      - 'incoming/**.tdf'

permissions:
  contents: write

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    # No outputs needed for this simplified flow

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch history to allow pull before push if needed (though likely removed)

      # Step 2: Install xmlstarlet & jq
      # jq is a command-line JSON processor
      - name: Install xmlstarlet and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet jq

      # Step 3: Find Uploaded TDF
      - name: Find Uploaded TDF
        id: find_file
        run: |
          TDF_FILE=$(find incoming -name '*.tdf' -print -quit)
          if [ -z "$TDF_FILE" ]; then echo "No TDF file found."; exit 1; fi
          echo "Found TDF file: $TDF_FILE"
          echo "file_path=$TDF_FILE" >> $GITHUB_OUTPUT

      # Step 4: Process TDF -> XML and Get Info
      - name: Process TDF and Extract Info
        id: process_tdf
        run: |
          INPUT_FILE="${{ steps.find_file.outputs.file_path }}"
          echo "Processing file: $INPUT_FILE"

          # Extract Info (Handle potential errors gracefully)
          TOURNAMENT_NAME=$(xmlstarlet sel -t -v '/tournament/data/name' "$INPUT_FILE" 2>/dev/null || echo "Unknown Tournament")
          TOURNAMENT_DATE=$(xmlstarlet sel -t -v '/tournament/data/startdate' "$INPUT_FILE" 2>/dev/null || date +%m/%d/%Y) # Format: MM/DD/YYYY

          # Format date for sorting (YYYY-MM-DD)
          FORMATTED_DATE=$(date -d "$TOURNAMENT_DATE" +%Y-%m-%d 2>/dev/null || date +%Y-%m-%d)

          # Sanitize name for folder/URL slug
          SANITIZED_NAME=$(echo "$TOURNAMENT_NAME" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr '[:upper:]' '[:lower:]')
          if [ -z "$SANITIZED_NAME" ]; then SANITIZED_NAME="unnamed-tournament-$(date +%s)"; fi
          TOURNAMENT_FOLDER="$SANITIZED_NAME"
          echo "Target Folder: $TOURNAMENT_FOLDER"

          # Create directory & move/rename XML
          mkdir -p "$TOURNAMENT_FOLDER/data"
          echo "Moving '$INPUT_FILE' to '$TOURNAMENT_FOLDER/data/tournament_data.xml'"
          mv "$INPUT_FILE" "$TOURNAMENT_FOLDER/data/tournament_data.xml"
          if [ $? -ne 0 ]; then echo "ERROR: Failed to move TDF file!"; exit 1; fi

          # Output info for manifest update
          echo "name=${TOURNAMENT_NAME}" >> $GITHUB_OUTPUT
          echo "slug=${TOURNAMENT_FOLDER}" >> $GITHUB_OUTPUT
          echo "date=${FORMATTED_DATE}" >> $GITHUB_OUTPUT

      # Step 5: Update tournaments.json Manifest
      - name: Update tournaments.json
        run: |
          MANIFEST_FILE="data/tournaments.json"
          TEMP_MANIFEST="temp_manifest.json"
          TOURNAMENT_NAME="${{ steps.process_tdf.outputs.name }}"
          TOURNAMENT_SLUG="${{ steps.process_tdf.outputs.slug }}"
          TOURNAMENT_DATE="${{ steps.process_tdf.outputs.date }}"

          # Create manifest directory if it doesn't exist
          mkdir -p data

          # Create empty JSON array if manifest doesn't exist
          if [ ! -f "$MANIFEST_FILE" ]; then
            echo "[]" > "$MANIFEST_FILE"
            echo "Created $MANIFEST_FILE."
          fi

          # Create JSON object for the current tournament
          # Use jq for robust JSON creation, handling quotes and special chars
          NEW_ENTRY=$(jq -n --arg name "$TOURNAMENT_NAME" --arg slug "$TOURNAMENT_SLUG" --arg date "$TOURNAMENT_DATE" \
            '{name: $name, slug: $slug, date: $date}')

          # Add the new entry and remove potential duplicates based on slug, then sort by date descending
          # Use jq's 'map' and 'unique_by' for clean update
          jq --argjson newEntry "$NEW_ENTRY" --arg slug "$TOURNAMENT_SLUG" \
            '(. + [$newEntry]) | map(select(.slug != null)) | unique_by(.slug) | sort_by(.date) | reverse' \
            "$MANIFEST_FILE" > "$TEMP_MANIFEST"

          # Replace old manifest with updated one
          mv "$TEMP_MANIFEST" "$MANIFEST_FILE"
          echo "Updated $MANIFEST_FILE"
          cat $MANIFEST_FILE # Optional: show content in logs

      # Step 6: Commit and Push Changes
      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add . # Add the new tournament folder/XML and the updated manifest
          if ! git diff --staged --quiet; then
            TOURNAMENT_NAME_FOR_MSG="${{ steps.process_tdf.outputs.name }}" # Get name from output
            COMMIT_MSG="Automated: Add/Update tournament data for '$(echo "$TOURNAMENT_NAME_FOR_MSG" | sed "s/'/\\\'/g")'"
            git commit -m "$COMMIT_MSG"
            git push
            echo "Changes committed and pushed."
          else
            echo "No changes detected to commit."
          fi
