name: Process Tournament TDF Upload

# Trigger this workflow when a .tdf file is pushed to the 'incoming' directory on the main branch
on:
  push:
    branches:
      - main # Or your default branch name (e.g., master)
    paths:
      # MODIFIED: Trigger on .tdf files
      - 'incoming/**.tdf'

# Permissions needed for the Action to commit changes back to the repository
permissions:
  contents: write # Allow writing repository content

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    outputs: # Define outputs for use in later steps/debugging if needed
      processed_folder: ${{ steps.process_file.outputs.tournament_folder }}
      original_name: ${{ steps.process_file.outputs.tournament_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history

      - name: Install xmlstarlet
        run: |
          sudo apt-get update
          sudo apt-get install -y xmlstarlet

      - name: Find Uploaded TDF
        id: find_file # Renamed id slightly for clarity, though 'find_xml' would still work
        run: |
          # MODIFIED: Find the first .tdf file in incoming/
          TDF_FILE=$(find incoming -name '*.tdf' -print -quit)
          if [ -z "$TDF_FILE" ]; then
            echo "No TDF file found in incoming/. Exiting."
            exit 1
          fi
          echo "Found TDF file: $TDF_FILE"
          # Use the same output name for consistency with the next step
          echo "file_path=$TDF_FILE" >> $GITHUB_OUTPUT

      - name: Process Tournament File
        id: process_file # Give this step an id to reference its outputs
        run: |
          # Uses the output from the previous step
          INPUT_FILE="${{ steps.find_file.outputs.file_path }}"
          echo "Processing file: $INPUT_FILE"

          # Extract tournament name from XML content (should work for TDF if it's XML)
          TOURNAMENT_NAME=$(xmlstarlet sel -t -v '/tournament/data/name' "$INPUT_FILE")
          if [ -z "$TOURNAMENT_NAME" ]; then
            echo "Could not extract tournament name from $INPUT_FILE. Using filename as fallback."
            # Fallback: Use filename without extension if name tag is missing
            # MODIFIED: Use .tdf extension in basename
            BASENAME=$(basename "$INPUT_FILE" .tdf)
            TOURNAMENT_NAME=${BASENAME//_/ } # Replace underscores with spaces
          fi
          echo "Original Tournament Name: $TOURNAMENT_NAME"

          # Sanitize tournament name for folder path
          SANITIZED_NAME=$(echo "$TOURNAMENT_NAME" | sed -e 's/ /-/g' -e 's/[^A-Za-z0-9-]//g')
          if [ -z "$SANITIZED_NAME" ]; then
            echo "Sanitized name is empty. Using 'Unnamed-Tournament-$(date +%s)'."
            SANITIZED_NAME="Unnamed-Tournament-$(date +%s)"
          fi
          TOURNAMENT_FOLDER="$SANITIZED_NAME"
          echo "Target Folder: $TOURNAMENT_FOLDER"

          # Create target directory structure
          mkdir -p "$TOURNAMENT_FOLDER/data"

          # Create the index.html file for this specific tournament
          cat << EOF > "$TOURNAMENT_FOLDER/index.html"
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>${TOURNAMENT_NAME} - Pairings</title>
              <!-- Google Font -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
              <!-- Link to shared CSS file -->
              <link rel="stylesheet" href="../assets/style.css">
          </head>
          <body>
              <header>
                  <div class="container">
                       <h1 id="tournament-name">${TOURNAMENT_NAME}</h1> <!-- Set tournament name directly -->
                       <p id="tournament-info"></p> <!-- Script updates city/country -->
                       <!-- Update status span will be added here by JS -->
                  </div>
              </header>
              <main>
                  <div class="container">
                      <div class="controls">
                          <nav id="round-tabs"></nav>
                          <input type="text" id="search-input" placeholder="Search by Player Name...">
                      </div>
                      <div id="pairings-container">
                          <h2 id="current-round-title"></h2>
                          <table id="pairings-table">
                              <thead>
                                  <tr>
                                      <th>Table</th>
                                      <th>Player 1</th>
                                      <th>Player 2</th>
                                  </tr>
                              </thead>
                              <tbody id="pairings-body"></tbody>
                          </table>
                           <p id="loading-message">Loading pairings...</p>
                           <!-- <p id="no-search-results" style="display:none; text-align: center; margin-top: 15px; color: #6c757d;">No players found matching your search.</p> -->
                      </div>
                  </div>
              </main>
              <!-- Link to shared JavaScript file -->
              <script src="../assets/script.js"></script>
          </body>
          </html>
EOF
          echo "Generated $TOURNAMENT_FOLDER/index.html"

          # Move the TDF file to the target location, renaming it to .xml as expected by script.js
          mv "$INPUT_FILE" "$TOURNAMENT_FOLDER/data/tournament_data.xml"
          echo "Moved TDF to $TOURNAMENT_FOLDER/data/tournament_data.xml"

          # Set outputs for this step
          echo "tournament_folder=$TOURNAMENT_FOLDER" >> $GITHUB_OUTPUT
          echo "tournament_name=$TOURNAMENT_NAME" >> $GITHUB_OUTPUT # Pass original name

      - name: Update Root Index File
        run: |
          echo "Generating root index.html..."
          # Start the HTML file
          cat << EOF > index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Available Tournaments</title>
              <!-- Google Font -->
              <link rel="preconnect" href="https://fonts.googleapis.com">
              <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
              <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
              <!-- Link to shared CSS file -->
              <link rel="stylesheet" href="./assets/style.css">
          </head>
          <body>
              <header>
                  <div class="container">
                       <h1>Available Tournaments</h1>
                       <p>Select a tournament below to view pairings.</p>
                  </div>
              </header>
              <main>
                  <div class="container">
                      <table class="tournament-list-table">
                          <thead>
                              <tr>
                                  <th>Tournament Name</th>
                              </tr>
                          </thead>
                          <tbody>
          EOF

          # Find all tournament directories (excluding '.', 'assets', 'incoming', '.github')
          # This command ALREADY excludes .github, so no change needed here.
          find . -maxdepth 1 -mindepth 1 -type d ! -path './assets' ! -path './incoming' ! -path './.github' -print0 | while IFS= read -r -d $'\0' dir; do
              FOLDER_NAME=$(basename "$dir")
              # Use the folder name (sanitized) as link text - simpler than mapping back
              # Add a row to the table for each tournament folder found
              echo "Adding row for $FOLDER_NAME"
              echo "                              <tr>" >> index.html
              echo "                                  <td><a href=\"./$FOLDER_NAME/\">$FOLDER_NAME</a></td>" >> index.html
              echo "                              </tr>" >> index.html
          done

          # Close the HTML structure
          cat << EOF >> index.html
                          </tbody>
                      </table>
                  </div>
              </main>
          </body>
          </html>
          EOF
          echo "Generated root index.html"

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git pull # Pull latest changes before committing, avoids potential conflicts
          git add . # Add all changes (new folder, moved file, updated root index)
          # Commit only if there are staged changes
          if ! git diff --staged --quiet; then
            # Use the original tournament name in the commit message if available
            ORIGINAL_NAME="${{ steps.process_file.outputs.tournament_name }}"
            COMMIT_MSG="Automated: Processed upload"
            if [ ! -z "$ORIGINAL_NAME" ]; then
               COMMIT_MSG="$COMMIT_MSG for '$ORIGINAL_NAME'"
            fi
            git commit -m "$COMMIT_MSG"
            git push
          else
            echo "No changes detected to commit."
          fi
