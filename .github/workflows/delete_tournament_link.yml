name: Delete Tournament Link from Homepage

on:
  repository_dispatch:
    types: [delete-tournament-link] # Triggered by the custom event sent from upload.js

permissions:
  contents: write # Allow workflow to commit changes back to the repo

jobs:
  delete-link:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }} # Default token

      - name: Get Tournament Slug from Payload
        id: get_slug
        run: |
          slug_to_delete="${{ github.event.client_payload.slug }}"
          if [[ -z "$slug_to_delete" ]]; then
            echo "ERROR: No slug provided in the event payload." >&2
            exit 1
          fi
          # Basic validation/sanitization
          if [[ ! "$slug_to_delete" =~ ^[a-zA-Z0-9._-]+$ ]]; then # Allow ., _, -
             echo "ERROR: Invalid slug format received: $slug_to_delete" >&2
             exit 1
          fi
          echo "Slug to delete: $slug_to_delete"
          echo "slug=$slug_to_delete" >> $GITHUB_OUTPUT

      - name: Remove Link from index.html
        id: remove_link
        run: |
          slug="${{ steps.get_slug.outputs.slug }}"
          index_file="index.html"
          temp_index_file="temp_index.html.$$" # Use process ID for temp file uniqueness

          echo "Attempting to remove link block for slug '$slug' from $index_file"

          if [ ! -f "$index_file" ]; then
             echo "ERROR: $index_file not found!" >&2
             exit 1
          fi

          # Corrected awk script to handle multi-line link blocks
          awk -v slug_pattern="href=\"./${slug}/\"" -v slug="${slug}" '
          BEGIN {
              skip=0;      # Flag: 1 if we are inside the block to be skipped, 0 otherwise
              removed=0;   # Flag: 1 if we successfully identified and skipped a block
          }
          {
              # If we find the start pattern AND we are not already skipping
              if ($0 ~ slug_pattern && skip == 0) {
                  skip=1;      # Start skipping
                  removed=1;   # Mark that removal was initiated
                  # Do not print this starting line, move to next line
                  next;
              }

              # If we are currently skipping lines
              if (skip == 1) {
                  # Check if this line contains the closing tag
                  if ($0 ~ /<\/a>/) {
                      skip=0;      # Stop skipping
                      # Print the "removed" comment *once* after skipping the block
                      # Add appropriate indentation if desired
                      print "                <!-- Link block for " slug " removed by workflow -->";
                      # Do not print the closing </a> line, move to next line
                      next;
                  }
                  # If skipping, but not the end tag, just skip this line
                  else {
                      next;
                  }
              }

              # If we are not skipping, print the current line
              print $0;
          }
          END {
              # Check if we started skipping but never finished (malformed HTML?)
              if (skip == 1) {
                  print "ERROR: Found start of link block but not the closing </a> tag for slug \047" slug "\047!" > "/dev/stderr";
                  exit 1; # Indicate error
              }
              # Report if the block was successfully removed or never found
              if (removed == 0) {
                  print "WARNING: No link block found for slug \047" slug "\047 in index.html. No changes made." > "/dev/stderr";
              } else {
                  print "Link block removal pattern applied successfully." > "/dev/stderr";
              }
          }' "$index_file" > "$temp_index_file"


          # Check if awk command succeeded (exit status 0)
          if [ $? -ne 0 ]; then
              echo "ERROR: awk command failed to process $index_file." >&2
              rm -f "$temp_index_file" # Clean up temp file on error
              exit 1
          elif [ ! -s "$temp_index_file" ]; then
              # Check if temp file is empty
              echo "ERROR: Processed file $temp_index_file is empty. Aborting." >&2
              rm -f "$temp_index_file"
              exit 1
          fi

          # Check if the file content actually changed
          if cmp -s "$index_file" "$temp_index_file"; then
             echo "No changes detected in $index_file after processing. Link might have been absent."
             rm "$temp_index_file" # Clean up temp file
             echo "changed=false" >> $GITHUB_OUTPUT
          else
             echo "Changes detected. Replacing original $index_file."
             mv "$temp_index_file" "$index_file"
             echo "changed=true" >> $GITHUB_OUTPUT
          fi
        shell: bash # Ensure bash is used

      - name: Commit and Push Updated Index
        if: steps.remove_link.outputs.changed == 'true' # Only run if changes were made
        run: |
          slug="${{ steps.get_slug.outputs.slug }}"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add index.html
          # Check staging area before committing
          if git diff --staged --quiet; then
            echo "No changes staged for commit. This might indicate an issue."
          else
            git commit -m "Remove link for deleted tournament: ${slug}"
            echo "Pushing updated index.html to branch ${{ github.ref_name }}"
            # Retry push slightly in case of brief conflicts (optional)
            git push origin ${{ github.ref_name }} || (sleep 5 && git push origin ${{ github.ref_name }})
          fi

      - name: No Changes to Commit
        if: steps.remove_link.outputs.changed == 'false'
        run: echo "No changes were made to index.html."
